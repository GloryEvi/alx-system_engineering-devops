# 2-secured_and_monitored_web_infrastructure

## Infrastructure Diagram
[https://imgur.com/a/OQBgpHU]

## Infrastructure Components Explanation

### Why we are adding each element:

**3 Firewalls:**
We are adding 3 firewalls (one for each server) to provide security protection by filtering incoming and outgoing network traffic. Each firewall acts as a barrier between trusted internal networks and untrusted external networks.

**1 SSL Certificate:**
We are adding an SSL certificate to serve www.foobar.com over HTTPS. This encrypts the communication between users and the website, ensuring data privacy and security.

**3 Monitoring Clients:**
We are adding 3 monitoring clients (one for each server) to collect performance data, system metrics, and logs. These clients send data to monitoring services like Sumologic for analysis and alerting.

### Security Components

**What are firewalls for:**
Firewalls are security devices that monitor and control incoming and outgoing network traffic based on predetermined security rules. They:
- Block unauthorized access attempts
- Filter malicious traffic
- Prevent network attacks
- Control which ports and protocols can be used
- Log security events for analysis

**Why is the traffic served over HTTPS:**
Traffic is served over HTTPS because:
- **Data Encryption:** All data transmitted between the user and server is encrypted
- **Data Integrity:** Ensures data hasn't been tampered with during transmission
- **Authentication:** Verifies the identity of the website
- **Trust:** Users see the secure padlock icon, building confidence
- **SEO Benefits:** Search engines favor HTTPS websites
- **Compliance:** Many regulations require encrypted data transmission

### Monitoring

**What monitoring is used for:**
Monitoring is used for:
- **Performance Tracking:** Monitor server CPU, memory, disk usage, and response times
- **Availability Monitoring:** Ensure services are running and accessible
- **Security Monitoring:** Detect suspicious activities and potential breaches
- **Capacity Planning:** Track resource usage trends to plan for scaling
- **Alerting:** Notify administrators of issues before they become critical
- **Troubleshooting:** Provide data to diagnose and resolve problems

**How the monitoring tool is collecting data:**
The monitoring tool collects data through:
- **Agents/Clients:** Software installed on each server that gathers system metrics
- **Log Collection:** Parsing and analyzing log files from applications and services
- **API Calls:** Querying system APIs for performance data
- **Network Monitoring:** Tracking network traffic and response times
- **Database Queries:** Monitoring database performance and query execution
- **Custom Metrics:** Application-specific metrics defined by developers

**What to do if you want to monitor your web server QPS (Queries Per Second):**
To monitor web server QPS:
1. **Configure Nginx logging** to capture request timestamps and details
2. **Set up log parsing** in your monitoring client to extract request data
3. **Create QPS metrics** by counting requests per second from the logs
4. **Set up dashboards** to visualize QPS trends over time
5. **Configure alerts** for when QPS exceeds normal thresholds
6. **Use tools like** `tail -f access.log | grep -c "GET"` for real-time monitoring
7. **Implement application-level metrics** to track specific endpoint performance

## Infrastructure Issues

### Why terminating SSL at the load balancer level is an issue:
- **Internal Traffic Not Encrypted:** Traffic between the load balancer and servers is not encrypted, creating security vulnerability
- **Single Point of Failure:** If the load balancer is compromised, all SSL certificates are at risk
- **Compliance Issues:** Some regulations require end-to-end encryption
- **Internal Network Exposure:** Sensitive data travels unencrypted within the internal network
- **Certificate Management:** All SSL certificates are centralized, making management more complex

### Why having only one MySQL server capable of accepting writes is an issue:
- **Single Point of Failure:** If the Primary database fails, the entire application cannot perform write operations
- **Performance Bottleneck:** All write operations are limited to one server's capacity
- **No Write Scalability:** Cannot distribute write load across multiple servers
- **Maintenance Downtime:** Any maintenance on the Primary database affects all write operations
- **Data Loss Risk:** If the Primary fails before replication, recent data could be lost

### Why having servers with all the same components might be a problem:
- **Resource Waste:** Each server runs all components even if only some are needed
- **Unnecessary Complexity:** Managing multiple identical servers increases operational overhead
- **Performance Issues:** Database operations on all servers can impact web/application performance
- **Scaling Inefficiency:** Cannot scale individual components independently
- **Security Risk:** If one component is compromised, all servers are vulnerable
- **Maintenance Overhead:** Updates must be applied to all components on all servers
- **Cost Inefficiency:** Paying for resources that may not be fully utilized